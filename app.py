# app.py
# -*- coding: utf-8 -*-
import streamlit as st

# --- Theme / Layout ---
from utils.theme import (
    set_base_page_config,
    inject_global_css,
    get_plotly_template,
)

# --- Data loaders ---
from utils.data import (
    load_all_data,   # -> df1, df2, df3, df1_melted, national_average, month_cols
    load_geojson,    # -> thailand_geojson
)

# --- Components ---
from components.kpi_card import render_kpis
from components.charts import (
    render_main_row_charts,
    render_transactions_and_sources,
)
from components.mapbox import render_thailand_map


# =============================================================================
# App
# =============================================================================
def main() -> None:
    # 1) Page & CSS
    set_base_page_config()
    inject_global_css()
    plotly_template = get_plotly_template()  # "plotly_white"

    # 2) Session defaults (Night/Day toggle)
    if "display_mode" not in st.session_state:
        st.session_state.display_mode = "Day"   # ‡πÄ‡∏£‡∏¥‡πà‡∏° Day ‡πÄ‡∏™‡∏°‡∏≠

    # 3) Load all data (cached inside utils.data)
    df1, df2, df3, df1_melted, national_avg, month_cols = load_all_data()
    th_geo = load_geojson()

    # 4) Sidebar controls
    with st.sidebar:
        st.header("üéõÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")

        # Night/Day toggle (‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ KPI ‡∏ú‡πà‡∏≤‡∏ô CSS)
        is_night = st.toggle("Night üåô", value=(st.session_state.display_mode == "Night"))
        st.session_state.display_mode = "Night" if is_night else "Day"

        selected_month = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            options=month_cols,
            index=len(month_cols) - 1,
        )

        selected_province = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°)",
            options=["‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°"] + df1.index.tolist(),
            index=0,
        )

        channel_filter = st.multiselect(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
            options=list(df2.columns),
            default=[],
        )

        product_filter = st.multiselect(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
            options=list(df3.columns),
            default=[],
        )

    # 5) Header & subtitle
    st.title("üõçÔ∏è Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ OTOP (‡∏ä‡∏∏‡∏î‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï)")
    st.caption(
        f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô **{selected_month}** ‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏ó (‡∏ø) ‚Ä¢ "
        "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: **otop_r04, otop_r05, otop_r06** (‡∏î‡∏π‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)"
    )

    # 6) KPI ‚Äì 4 ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    render_kpis(df1, df2, df3, selected_month)

    # 7) Main row charts (‡∏ã‡πâ‡∏≤‡∏¢: ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏ß‡∏°, ‡∏Ç‡∏ß‡∏≤: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á)
    render_main_row_charts(
        df1=df1,
        df2=df2 if not channel_filter else df2.loc[:, channel_filter],
        selected_month=selected_month,
        plotly_template=plotly_template,
    )

    st.divider()

    # 8) ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏•‡∏≠‡∏î)
    st.subheader("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‚Äî ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
    render_thailand_map(
        df1=df1,
        df1_melted=df1_melted,
        thailand_geojson=th_geo,
        selected_month=selected_month,
        theme_mode=st.session_state.display_mode,  # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ component ‡πÉ‡∏ä‡πâ
    )

    st.divider()

    # 9) ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏∂‡∏Å: ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î + ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CDD + ‡πÇ‡∏î‡∏ô‡∏±‡∏ó Revenue Sources
    render_transactions_and_sources(
        df1=df1,
        df2=df2 if not channel_filter else df2.loc[:, channel_filter],
        df3=df3 if not product_filter else df3.loc[:, product_filter],
        selected_month=selected_month,
        selected_province=selected_province,
        channel_filter=channel_filter,
        product_filter=product_filter,
        national_avg=national_avg,
        plotly_template=plotly_template,
    )

    st.write("")  # spacer


# =============================================================================
# Entrypoint
# =============================================================================
if __name__ == "__main__":
    main()
