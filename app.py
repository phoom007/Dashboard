# app.py
# -*- coding: utf-8 -*-
import streamlit as st

# ---------- Theme / Layout ----------
try:
    from utils.theme import set_base_page_config, inject_global_css, get_plotly_template
except Exception as e:
    # Fallback ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤ ‡πÜ ‡∏ñ‡πâ‡∏≤ utils.theme ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
    def set_base_page_config():
        st.set_page_config(page_title="OTOP Dashboard", page_icon="üõçÔ∏è", layout="wide")

    def inject_global_css():
        pass

    def get_plotly_template() -> str:
        return "plotly_white"

    st.sidebar.warning("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î utils.theme ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Äî ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")

# ---------- Data loaders ----------
try:
    from utils.data import load_all_data, load_geojson
except Exception as e:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ utils.data ‡πÑ‡∏î‡πâ")
    st.exception(e)
    st.stop()

# ---------- Components (‡∏°‡∏µ fallback ‡∏´‡∏≤‡∏Å‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠) ----------
_kpi_ok = _charts_ok = _map_ok = True
try:
    from components.kpi_card import render_kpis
except Exception:
    _kpi_ok = False

try:
    from components.charts import render_main_row_charts, render_transactions_and_sources
except Exception:
    _charts_ok = False

try:
    from components.mapbox import render_thailand_map
except Exception:
    _map_ok = False


def main() -> None:
    # 1) Page config & CSS
    set_base_page_config()
    inject_global_css()
    plotly_template = get_plotly_template()  # ‡πÉ‡∏ä‡πâ "plotly_white" ‡∏ï‡∏•‡∏≠‡∏î

    # 2) Session defaults
    if "display_mode" not in st.session_state:
        st.session_state.display_mode = "Day"  # ‡πÄ‡∏£‡∏¥‡πà‡∏° Day ‡πÄ‡∏™‡∏°‡∏≠

    # 3) ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á
    try:
        loaded = load_all_data()
        if not isinstance(loaded, (list, tuple)) or len(loaded) != 6:
            raise ValueError(
                f"load_all_data() ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô 6 ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏ô‡∏¥‡∏î {type(loaded)} "
                f"‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(loaded) if hasattr(loaded,'__len__') else 'unknown'}"
            )
        df1, df2, df3, df1_melted, national_avg, month_cols = loaded
    except Exception as e:
        st.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å load_all_data()")
        st.caption("‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ü‡∏•‡πå utils/data.py ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏ö 6 ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'/'‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
        st.exception(e)
        return  # ‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å main ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏•‡πà‡∏á

    try:
        th_geo = load_geojson()  # ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô None ‡πÑ‡∏î‡πâ
    except Exception as e:
        th_geo = None
        st.warning("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î GeoJSON ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Äî ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ")
        st.exception(e)

    # 4) Sidebar
    with st.sidebar:
        st.header("üéõÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
        is_night = st.toggle("Night üåô", value=(st.session_state.display_mode == "Night"))
        st.session_state.display_mode = "Night" if is_night else "Day"

        selected_month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", options=month_cols, index=len(month_cols) - 1)
        selected_province = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°)", options=["‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°"] + df1.index.tolist(), index=0)

        channel_filter = st.multiselect("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", options=list(df2.columns), default=[])
        product_filter = st.multiselect("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", options=list(df3.columns), default=[])

    # 5) Header
    st.title("üõçÔ∏è Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ OTOP (‡∏ä‡∏∏‡∏î‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï)")
    st.caption(
        f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô **{selected_month}** ‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏ó (‡∏ø) ‚Ä¢ "
        "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: **otop_r04, otop_r05, otop_r06** (‡∏î‡∏π‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)"
    )

    # 6) KPI row
    if _kpi_ok:
        try:
            render_kpis(df1, df2, df3, selected_month)
        except Exception as e:
            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå KPI")
            st.exception(e)
    else:
        # Fallback: ‡πÇ‡∏ä‡∏ß‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å ‡πÜ ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÇ‡∏•‡πà‡∏á
        st.info("‚ÑπÔ∏è ‡πÉ‡∏ä‡πâ KPI ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö components.kpi_card)")
        total_sales = df1[selected_month].sum()
        top_province = df1[selected_month].idxmax()
        top_sales = df1[selected_month].max()
        st.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)", f"‡∏ø{total_sales:,.0f}")
        st.metric("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", top_province)
        st.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"‡∏ø{top_sales:,.0f}")

    # 7) Main charts row
    df2_view = df2 if not channel_filter else df2.loc[:, channel_filter]
    if _charts_ok:
        try:
            render_main_row_charts(
                df1=df1,
                df2=df2_view,
                selected_month=selected_month,
                plotly_template=plotly_template,
            )
        except Exception as e:
            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å")
            st.exception(e)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö components.charts ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")

    st.divider()

    # 8) Thailand map
    if _map_ok and th_geo is not None:
        try:
            st.subheader("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‚Äî ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
            render_thailand_map(
                df1=df1,
                df1_melted=df1_melted,
                thailand_geojson=th_geo,
                selected_month=selected_month,
                theme_mode=st.session_state.display_mode,
            )
        except Exception as e:
            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà")
            st.exception(e)
    else:
        st.info("‚ÑπÔ∏è ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ (‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• map ‡∏´‡∏£‡∏∑‡∏≠ geojson ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)")

    st.divider()

    # 9) Transactions + Sources + Trend/Donut
    df3_view = df3 if not product_filter else df3.loc[:, product_filter]
    if _charts_ok:
        try:
            render_transactions_and_sources(
                df1=df1,
                df2=df2_view,
                df3=df3_view,
                selected_month=selected_month,
                selected_province=selected_province,
                channel_filter=channel_filter,
                product_filter=product_filter,
                national_avg=national_avg,
                plotly_template=plotly_template,
            )
        except Exception as e:
            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡πà‡∏ß‡∏ô Transactions/‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°")
            st.exception(e)
    else:
        st.info("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô Transactions/‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ components.charts")

    # 10) ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤
    with st.expander("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π)"):
        st.markdown(
            "- ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ö‡∏≤‡∏ó (‡∏ø) ‡∏ï‡∏•‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö\n"
            "- ‡∏Ñ‡∏≥‡∏ô‡∏¥‡∏¢‡∏≤‡∏°:\n"
            "  - **‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®**: ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `df1`\n"
            "  - **‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î**: ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `df1`\n"
            "  - **‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `df3`\n"
            "- ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î: r04 (‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î), r05 (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤), r06 (‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á)\n"
            "  ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ù‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß"
        )


# ---------- Run (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏•‡πà‡∏á) ----------
try:
    main()
except Exception as e:
    st.error("‚ùå ‡πÅ‡∏≠‡∏õ‡∏•‡πâ‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö global main()")
    st.exception(e)
