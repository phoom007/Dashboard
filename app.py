# app.py
# -*- coding: utf-8 -*-
import streamlit as st

# ---------- Theme / Layout ----------
from utils.theme import (
    set_base_page_config,
    inject_global_css,
    get_plotly_template,
)

# ---------- Data loaders ----------
from utils.data import (
    load_all_data,   # -> df1, df2, df3, df1_melted, national_avg, month_cols
    load_geojson,    # -> thailand_geojson
)

# ---------- Components ----------
from components.kpi_card import render_kpis
from components.charts import (
    render_main_row_charts,
    render_transactions_and_sources,
)
from components.mapbox import render_thailand_map


def main() -> None:
    # 1) Page config & CSS (‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏î UI)
    set_base_page_config()
    inject_global_css()
    plotly_template = get_plotly_template()  # "plotly_white"

    # 2) Session defaults
    if "display_mode" not in st.session_state:
        st.session_state.display_mode = "Day"  # ‡πÄ‡∏£‡∏¥‡πà‡∏° Day ‡πÄ‡∏™‡∏°‡∏≠

    # 3) ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á + debug panel)
    try:
        loaded = load_all_data()
        if not isinstance(loaded, (list, tuple)) or len(loaded) != 6:
            raise ValueError(
                f"load_all_data() ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô 6 ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ {type(loaded)} "
                f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß {len(loaded) if hasattr(loaded,'__len__') else 'unknown'}"
            )
        df1, df2, df3, df1_melted, national_avg, month_cols = loaded
    except Exception as e:
        st.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å load_all_data()")
        st.caption("‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ü‡∏•‡πå utils/data.py ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏ö 6 ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'/'‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
        st.exception(e)
        st.stop()

    th_geo = load_geojson()  # ‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ None ‚Äî ‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ handle ‡πÄ‡∏≠‡∏á

    # 4) Sidebar (‡πÇ‡∏´‡∏°‡∏î/‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå)
    with st.sidebar:
        st.header("üéõÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")

        # Night/Day toggle (‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ KPI ‡∏ú‡πà‡∏≤‡∏ô CSS; ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏ß)
        is_night = st.toggle("Night üåô", value=(st.session_state.display_mode == "Night"))
        st.session_state.display_mode = "Night" if is_night else "Day"

        selected_month = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            options=month_cols,
            index=len(month_cols) - 1,
        )

        selected_province = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°)",
            options=["‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°"] + df1.index.tolist(),
            index=0,
        )

        channel_filter = st.multiselect(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
            options=list(df2.columns),
            default=[],
        )

        product_filter = st.multiselect(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
            options=list(df3.columns),
            default=[],
        )

    # 5) ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
    st.title("üõçÔ∏è Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ OTOP (‡∏ä‡∏∏‡∏î‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï)")
    st.caption(
        f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô **{selected_month}** ‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏ó (‡∏ø) ‚Ä¢ "
        "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: **otop_r04, otop_r05, otop_r06** (‡∏î‡∏π‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)"
    )

    # 6) KPI ‚Äì 4 ‡∏Å‡∏•‡πà‡∏≠‡∏á ‚Äú‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‚Äù (HTML ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    render_kpis(df1, df2, df3, selected_month)

    # 7) ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å (‡∏ã‡πâ‡∏≤‡∏¢: ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏ß‡∏°, ‡∏Ç‡∏ß‡∏≤: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á)
    df2_view = df2 if not channel_filter else df2.loc[:, channel_filter]
    render_main_row_charts(
        df1=df1,
        df2=df2_view,
        selected_month=selected_month,
        plotly_template=plotly_template,
    )

    st.divider()

    # 8) ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏•‡∏≠‡∏î)
    st.subheader("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‚Äî ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
    render_thailand_map(
        df1=df1,
        df1_melted=df1_melted,
        thailand_geojson=th_geo,
        selected_month=selected_month,
        theme_mode=st.session_state.display_mode,
    )

    st.divider()

    # 9) ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î + ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CDD (‡∏ù‡∏±‡∏á r06/r05/r04) + ‡πÇ‡∏î‡∏ô‡∏±‡∏ó Revenue Sources
    df3_view = df3 if not product_filter else df3.loc[:, product_filter]
    render_transactions_and_sources(
        df1=df1,
        df2=df2_view,
        df3=df3_view,
        selected_month=selected_month,
        selected_province=selected_province,
        channel_filter=channel_filter,
        product_filter=product_filter,
        national_avg=national_avg,
        plotly_template=plotly_template,
    )

    # 10) ‡πÄ‡∏ä‡∏¥‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    with st.expander("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π)"):
        st.markdown(
            "- ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ö‡∏≤‡∏ó (‡∏ø) ‡∏ï‡∏•‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö\n"
            "- ‡∏Ñ‡∏≥‡∏ô‡∏¥‡∏¢‡∏≤‡∏°:\n"
            "  - **‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®**: ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `df1`\n"
            "  - **‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î**: ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `df1`\n"
            "  - **‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `df3`\n"
            "- ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î: r04 (‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î), r05 (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤), r06 (‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á)\n"
            "  ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ù‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß"
        )


# ------------------ Run (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á ‡πÜ ‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏•‡πà‡∏á) ------------------
main()
