# app.py
# -*- coding: utf-8 -*-
import streamlit as st
import traceback

# ---- Utils & Components ----
from utils.theme import set_base_page_config, inject_global_css, get_plotly_template
from utils.data import load_all_data, load_geojson

from components.sidebar import render_sidebar
from components.kpi_card import render_kpis
from components.mapbox import render_thailand_map

from components.charts import (
    render_time_kind_controls,
    render_main_row_charts,
    render_regional_growth,
    render_product_category_performance,
    render_revenue_sources,
    render_cdd_sources_embeds,
    # NEW 4 charts
    render_province_vs_avg_trend,
    render_mom_change_by_province,
    render_monthly_heatmap_selected,
    render_channel_cumulative_ytd,
)

# -------------------------------------------------
# Main
# -------------------------------------------------
def main() -> None:
    # 0) Base setup (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß‡∏ï‡∏•‡∏≠‡∏î)
    set_base_page_config()
    inject_global_css()  # CSS ‡∏Å‡∏•‡∏≤‡∏á (KPI 4 ‡∏Å‡∏•‡πà‡∏≠‡∏á/‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î, Night ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ KPI)

    # 1) Data
    df1, df2, df3, df1_melted, national_avg, month_cols = load_all_data()
    th_geo = load_geojson()

    # 2) Sidebar (‡πÇ‡∏•‡πÇ‡∏Å‡πâ + Night/Day toggle + ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå)
    sidebar_state = render_sidebar(df1, df2, df3)
    selected_month     = sidebar_state.get("selected_month")
    selected_province  = sidebar_state.get("selected_province", "‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    channel_filter     = sidebar_state.get("channel_filter", None)  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤
    product_filter     = sidebar_state.get("product_filter", None)  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤

    # 3) Title (‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
    st.title("Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ OTOP (‡∏ä‡∏∏‡∏î‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï)")
    st.caption(
        f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô **{selected_month}** ‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏ó (‡∏ø) ‚Ä¢ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: otop_r04, otop_r05, otop_r06 (‡∏î‡∏π‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)"
    )

    # 4) KPI (4 ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô ‡∏ö‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    render_kpis(df1, df2, df3, selected_month)
    st.markdown("")

    # 5) Global controls + Main charts (‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤)
    render_time_kind_controls(prefix="main")
    render_main_row_charts(
        df1=df1,
        df2=df2,
        selected_month=selected_month,
        month_cols=month_cols,
        selected_province=selected_province,
        plotly_template=get_plotly_template(),
        key_prefix="main",
    )

    st.markdown("---")

    # 6) Tabs
    tab1, tab2 = st.tabs(["üó∫Ô∏è ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "üîé ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"])

    # 6.1 Tab 1 ‚Äî ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà + Revenue Sources + CDD
    with tab1:
        # ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (Mapbox ‡πÇ‡∏ó‡∏ô‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏°‡∏≠)
        render_thailand_map(
            df1=df1,
            df1_melted=df1_melted,
            thailand_geojson=th_geo,
            selected_month=selected_month
        )

        st.markdown("---")
        # Revenue Sources (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        render_revenue_sources(
            df2=df2,
            selected_month=selected_month,
            plotly_template=get_plotly_template(),
            key_prefix="tab1"
        )

        st.markdown("---")
        # CDD embeds (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ 3 ‡πÄ‡∏ß‡πá‡∏ö)
        render_cdd_sources_embeds(key_prefix="tab1")

    # 6.2 Tab 2 ‚Äî ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å + Revenue Sources + CDD
    with tab2:
        # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏° (‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤/‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        render_time_kind_controls(prefix="deep")

        # Regional Growth (‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå region ‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        render_regional_growth(
            df1=df1,
            month_cols=month_cols,
            selected_month=selected_month,
            selected_province=selected_province,
            plotly_template=get_plotly_template(),
            key_prefix="deep"
        )

        # Product Category (‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
        render_product_category_performance(
            df3=df3,
            selected_month=selected_month,
            selected_province=selected_province,
            plotly_template=get_plotly_template(),
            key_prefix="deep"
        )

        # ---- NEW: 4 charts (2 ‡πÅ‡∏ñ‡∏ß x 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå) ----
        st.markdown("---")
        st.subheader("‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
        c1, c2 = st.columns(2, gap="large")
        with c1:
            render_province_vs_avg_trend(
                df1=df1,
                month_cols=month_cols,
                selected_province=selected_province,
                plotly_template=get_plotly_template(),
                key_prefix="extra_row1_left",
            )
        with c2:
            render_mom_change_by_province(
                df1=df1,
                month_cols=month_cols,
                selected_month=selected_month,
                selected_province=selected_province,
                plotly_template=get_plotly_template(),
                key_prefix="extra_row1_right",
            )

        c3, c4 = st.columns(2, gap="large")
        with c3:
            render_monthly_heatmap_selected(
                df1=df1,
                month_cols=month_cols,
                selected_month=selected_month,
                selected_province=selected_province,
                plotly_template=get_plotly_template(),
                key_prefix="extra_row2_left",
            )
        with c4:
            render_channel_cumulative_ytd(
                df2=df2,
                month_cols=month_cols,
                selected_month=selected_month,
                plotly_template=get_plotly_template(),
                key_prefix="extra_row2_right",
            )

        st.markdown("---")
        # Revenue Sources & CDD (‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Tab ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≠)
        render_revenue_sources(
            df2=df2,
            selected_month=selected_month,
            plotly_template=get_plotly_template(),
            key_prefix="tab2"
        )
        st.markdown("---")
        render_cdd_sources_embeds(key_prefix="tab2")

    # 7) Data sources (‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)
    st.markdown("---")
    st.markdown(
        "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î:  "
        "[otop_r04](https://logi.cdd.go.th/otop/cdd_report/otop_r04.php) ‚Ä¢ "
        "[otop_r05](https://logi.cdd.go.th/otop/cdd_report/otop_r05.php) ‚Ä¢ "
        "[otop_r06](https://logi.cdd.go.th/otop/cdd_report/otop_r06.php)"
    )


# -------------------------------------------------
# Entrypoint (‡πÅ‡∏™‡∏î‡∏á traceback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ error)
# -------------------------------------------------
if __name__ == "__main__":
    try:
        main()
    except Exception:
        st.set_page_config(page_title="OTOP Sales Dashboard", page_icon="üõçÔ∏è", layout="wide")
        st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)")
        st.code(traceback.format_exc())
