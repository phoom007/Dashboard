# ==============================================================================
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
# ==============================================================================
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
import urllib.request

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö Wide Mode ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠/‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
st.set_page_config(
    page_title="OTOP Sales Dashboard",
    page_icon="üõçÔ∏è",
    layout="wide"
)

# ==============================================================================
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå (Dark/Light Mode, Rounded Corners)
# ==============================================================================
def load_css():
    # CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Light Mode
    css_light = """
    <style>
        /* --- ‡∏Å‡∏≤‡∏£‡πå‡∏î KPI --- */
        .kpi-card {
            background-color: #FFFFFF;
            padding: 1.5rem;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            border: 1px solid #E0E0E0;
            transition: all 0.3s ease-in-out;
        }
        .kpi-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.12);
        }
        .kpi-title {
            font-size: 1rem;
            font-weight: 600;
            color: #4F4F4F;
            margin-bottom: 0.5rem;
        }
        .kpi-value {
            font-size: 2.2rem;
            font-weight: 700;
            color: #1A237E; /* ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏° */
        }
        .kpi-delta {
            font-size: 0.9rem;
            color: #828282;
        }

        /* --- ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö --- */
        .content-box {
            background-color: #F8F9FA;
            padding: 1rem;
            border-radius: 15px;
            border: 1px solid #E0E0E0;
        }
    </style>
    """

    # CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dark Mode
    css_dark = """
    <style>
        /* --- ‡∏Å‡∏≤‡∏£‡πå‡∏î KPI --- */
        .kpi-card {
            background-color: #1E1E1E; /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î */
            padding: 1.5rem;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            border: 1px solid #424242;
            transition: all 0.3s ease-in-out;
        }
        .kpi-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.5);
            border: 1px solid #757575;
        }
        .kpi-title {
            font-size: 1rem;
            font-weight: 600;
            color: #BDBDBD; /* ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ title */
            margin-bottom: 0.5rem;
        }
        .kpi-value {
            font-size: 2.2rem;
            font-weight: 700;
            color: #90CAF9; /* ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏ß‡πà‡∏≤‡∏á */
        }
        .kpi-delta {
            font-size: 0.9rem;
            color: #9E9E9E;
        }
        /* --- ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö --- */
        .content-box {
            background-color: #2C2C2C;
            padding: 1rem;
            border-radius: 15px;
            border: 1px solid #424242;
        }
    </style>
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö theme ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà CSS ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    if st.session_state.theme == "Dark":
        st.markdown(css_dark, unsafe_allow_html=True)
    else:
        st.markdown(css_light, unsafe_allow_html=True)


# ==============================================================================
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ==============================================================================
@st.cache_data
def load_all_data():
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
    df1 = pd.read_csv('sales_by_province.csv')
    df2 = pd.read_csv('sales_by_channel.csv')
    df3 = pd.read_csv('sales_by_product_type.csv')

    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DF1 (‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î) ---
    month_cols = [col for col in df1.columns if '2566' in col or '2567' in col]
    df1.set_index('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', inplace=True)

    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DF2 (‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á) ---
    df2.set_index('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', inplace=True)
    
    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DF3 (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤) ---
    df3.set_index('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', inplace=True)
    
    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Melted ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---
    df1_melted = df1.reset_index().melt(id_vars='‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', var_name='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', value_name='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢')
    
    # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ---
    national_average = df1[month_cols].mean()
    
    return df1, df2, df3, df1_melted, national_average, month_cols

@st.cache_data
def load_geojson():
    geojson_url = "https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json"
    try:
        with urllib.request.urlopen(geojson_url) as url:
            thailand_geojson = json.load(url)
        return thailand_geojson
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ: {e}")
        return None

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
try:
    df1, df2, df3, df1_melted, national_average, month_cols = load_all_data()
    thailand_geojson = load_geojson()
except FileNotFoundError:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• .csv! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á 3 ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö `dashboard_app.py`")
    st.stop()


# Mapping ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡πÑ‡∏ó‡∏¢ -> ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
province_name_map = {
    '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£': 'Bangkok', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£': 'Samut Prakan', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': 'Nonthaburi', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ': 'Pathum Thani',
    '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤': 'Phra Nakhon Si Ayutthaya', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á': 'Ang Thong', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ': 'Lopburi', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ': 'Sing Buri',
    '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó': 'Chai Nat', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ': 'Saraburi', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ': 'Chon Buri', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á': 'Rayong', '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': 'Chanthaburi',
    '‡∏ï‡∏£‡∏≤‡∏î': 'Trat', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤': 'Chachoengsao', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ': 'Prachin Buri', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å': 'Nakhon Nayok',
    '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß': 'Sa Kaeo', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤': 'Nakhon Ratchasima', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå': 'Buri Ram', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå': 'Surin',
    '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©': 'Si Sa Ket', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ': 'Ubon Ratchathani', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£': 'Yasothon', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥': 'Chaiyaphum',
    '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç': 'Amnat Charoen', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π': 'Nong Bua Lam Phu', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô': 'Khon Kaen', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ': 'Udon Thani',
    '‡πÄ‡∏•‡∏¢': 'Loei', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢': 'Nong Khai', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°': 'Maha Sarakham', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î': 'Roi Et', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå': 'Kalasin',
    '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£': 'Sakon Nakhon', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°': 'Nakhon Phanom', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£': 'Mukdahan', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà': 'Chiang Mai',
    '‡∏•‡∏≥‡∏û‡∏π‡∏ô': 'Lamphun', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á': 'Lampang', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå': 'Uttaradit', '‡πÅ‡∏û‡∏£‡πà': 'Phrae', '‡∏ô‡πà‡∏≤‡∏ô': 'Nan',
    '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤': 'Phayao', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢': 'Chiang Rai', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô': 'Mae Hong Son', '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå': 'Nakhon Sawan',
    '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ': 'Uthai Thani', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£': 'Kamphaeng Phet', '‡∏ï‡∏≤‡∏Å': 'Tak', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢': 'Sukhothai',
    '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å': 'Phitsanulok', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£': 'Phichit', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå': 'Phetchabun', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ': 'Ratchaburi',
    '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ': 'Kanchanaburi', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ': 'Suphan Buri', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°': 'Nakhon Pathom', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£': 'Samut Sakhon',
    '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°': 'Samut Songkhram', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ': 'Phetchaburi', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå': 'Prachuap Khiri Khan',
    '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä': 'Nakhon Si Thammarat', '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà': 'Krabi', '‡∏û‡∏±‡∏á‡∏á‡∏≤': 'Phangnga', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï': 'Phuket',
    '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ': 'Surat Thani', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á': 'Ranong', '‡∏ä‡∏∏‡∏°‡∏û‡∏£': 'Chumphon', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤': 'Songkhla', '‡∏™‡∏ï‡∏π‡∏•': 'Satun',
    '‡∏ï‡∏£‡∏±‡∏á': 'Trang', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á': 'Phatthalung', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ': 'Pattani', '‡∏¢‡∏∞‡∏•‡∏≤': 'Yala', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™': 'Narathiwat',
    '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨': 'Bueng Kan'
}
df1_melted['province_eng'] = df1_melted['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].map(province_name_map)

# ==============================================================================
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö (UI)
# ==============================================================================

# --- ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Filters) ‡πÅ‡∏•‡∏∞ Theme Toggle ‡∏ó‡∏µ‡πà Sidebar ---
st.sidebar.header("üé® ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")

# Theme Toggle
if 'theme' not in st.session_state:
    st.session_state.theme = "Light"

theme_mode = st.sidebar.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏µ‡∏°:",
    ["Light", "Dark"],
    index=0 if st.session_state.theme == "Light" else 1,
    key="theme_selector"
)
st.session_state.theme = theme_mode
load_css() # ‡πÇ‡∏´‡∏•‡∏î CSS ‡∏ï‡∏≤‡∏° theme ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î template ‡∏Ç‡∏≠‡∏á Plotly ‡∏ï‡∏≤‡∏° theme
theme_plotly = "plotly_white" if st.session_state.theme == "Light" else "plotly_dark"


# Filters
selected_month = st.sidebar.selectbox(
    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:',
    options=month_cols,
    index=len(month_cols)-1 # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
)
selected_province = st.sidebar.selectbox(
    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°):',
    options=['‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°'] + df1.index.tolist()
)

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß Dashboard ---
st.title("üõçÔ∏è Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ OTOP")
st.markdown(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô **{selected_month}**")

# --- ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (KPI Cards) ---
st.markdown("---")
# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ KPI
total_sales_month = df1[selected_month].sum()
top_province_month = df1[selected_month].idxmax()
top_province_sales = df1[selected_month].max()

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown(f"""
    <div class="kpi-card">
        <div class="kpi-title">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</div>
        <div class="kpi-value">‡∏ø{total_sales_month:,.0f}</div>
        <div class="kpi-delta">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}</div>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown(f"""
    <div class="kpi-card">
        <div class="kpi-title">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
        <div class="kpi-value">{top_province_month}</div>
        <div class="kpi-delta">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: ‡∏ø{top_province_sales:,.0f}</div>
    </div>
    """, unsafe_allow_html=True)

with col3:
    # ‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    month_key = selected_month.split(' ')[0]
    idx_match = next((idx for idx in df3.index if str(idx).startswith(month_key)), None)
    if idx_match:
        top_product_type = df3.loc[idx_match].idxmax()
        top_product_sales = df3.loc[idx_match].max()
        st.markdown(f"""
        <div class="kpi-card">
            <div class="kpi-title">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</div>
            <div class="kpi-value">{top_product_type}</div>
            <div class="kpi-delta">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: ‡∏ø{top_product_sales:,.0f}</div>
        </div>
        """, unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True) # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ

# --- ‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
tab1, tab2 = st.tabs(["üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"])

with tab1:
    st.subheader(f'‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ OTOP ‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}')
    
    col1_tab1, col2_tab1 = st.columns([3, 2]) # ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô 3:2

    with col1_tab1:
        st.markdown("##### ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
        _map_df = df1_melted[df1_melted['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] == selected_month].dropna(subset=['province_eng'])

        if thailand_geojson is not None and not _map_df.empty:
            fig_map = px.choropleth_mapbox(
                _map_df,
                geojson=thailand_geojson,
                locations='province_eng',
                featureidkey="properties.name",
                color='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢',
                color_continuous_scale="Viridis",
                mapbox_style="carto-positron" if st.session_state.theme == "Light" else "carto-darkmatter",
                center={"lat": 13.736717, "lon": 100.523186},
                zoom=4.5,
                opacity=0.6
            )
            fig_map.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
            st.plotly_chart(fig_map, use_container_width=True)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ")

    with col2_tab1:
        st.markdown("##### 20 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
        monthly_data = df1[[selected_month]].sort_values(by=selected_month, ascending=False).reset_index()
        
        fig_bar = px.bar(
            monthly_data.head(20).sort_values(by=selected_month, ascending=True),
            x=selected_month,
            y='‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
            orientation='h',
            labels={'‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': '', selected_month: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)'},
            template=theme_plotly,
            height=600
        )
        fig_bar.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig_bar, use_container_width=True)


with tab2:
    st.subheader(f'‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢')
    
    # --- ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ---
    st.markdown(f"##### ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á: **{selected_province}**")
    fig_line = go.Figure()
    if selected_province != '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°':
        fig_line.add_trace(go.Scatter(x=month_cols, y=df1.loc[selected_province], mode='lines+markers', name=selected_province))

    fig_line.add_trace(go.Scatter(x=month_cols, y=national_average, mode='lines', name='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', line=dict(dash='dash')))
    fig_line.update_layout(
        xaxis_title='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', yaxis_title='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)', xaxis_tickangle=-45, height=400,
        template=theme_plotly,
        legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01)
    )
    st.plotly_chart(fig_line, use_container_width=True)
    
    st.markdown("---")
    
    col1_tab2, col2_tab2 = st.columns(2)
    
    with col1_tab2:
        # --- ‡∏Å‡∏£‡∏≤‡∏ü‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á ---
        st.markdown(f"##### ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á ({selected_month})")
        month_key = selected_month.split(' ')[0]
        idx_match = next((idx for idx in df2.index if str(idx).startswith(month_key)), None)
        if idx_match:
            channel_data = df2.loc[idx_match]
            fig_pie_channel = px.pie(
                values=channel_data.values,
                names=channel_data.index,
                hole=.4,
                template=theme_plotly,
                title=""
            )
            st.plotly_chart(fig_pie_channel, use_container_width=True)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            
    with col2_tab2:
        # --- ‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
        st.markdown(f"##### ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({selected_month})")
        month_key = selected_month.split(' ')[0]
        idx_match = next((idx for idx in df3.index if str(idx).startswith(month_key)), None)
        if idx_match:
            product_data = df3.loc[idx_match]
            fig_pie_product = px.pie(
                values=product_data.values,
                names=product_data.index,
                hole=.4,
                template=theme_plotly,
                title=""
            )
            st.plotly_chart(fig_pie_product, use_container_width=True)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
